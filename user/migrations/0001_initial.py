# Generated by Django 5.0.6 on 2025-02-19 16:11

import ckeditor_uploader.fields
import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('city', '0001_initial'),
        ('profession', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('ho_va_ten_dem', models.CharField(blank=True, max_length=250, null=True, verbose_name='Họ và Tên đệm')),
                ('ten_goi', models.CharField(blank=True, max_length=250, null=True, verbose_name='Tên gọi')),
                ('gioi_tinh', models.CharField(choices=[('0', 'Vui lòng chọn'), ('1', 'Nam'), ('2', 'Nữ')], default=0, verbose_name='Giới tính')),
                ('nam_sinh', models.CharField(default=0, verbose_name='Năm sinh')),
                ('phone', models.CharField(blank=True, max_length=250, null=True, verbose_name='Điện thoại')),
                ('zalo', models.CharField(blank=True, max_length=250, null=True, verbose_name='Số Zalo')),
                ('facebook', models.CharField(blank=True, max_length=250, null=True, verbose_name='Facebook')),
                ('dia_chi', models.CharField(blank=True, max_length=250, null=True, verbose_name='Địa chỉ')),
                ('ghi_chu', ckeditor_uploader.fields.RichTextUploadingField(blank=True, null=True, verbose_name='Ghi chú')),
                ('chieu_cao', models.CharField(default=0, verbose_name='Chiều cao (cm)')),
                ('can_nang', models.CharField(default=0, verbose_name='Cân nặng (kg)')),
                ('thi_luc', models.CharField(default=0, verbose_name='Thị lực (1 - 10)')),
                ('hinh_xam', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Hình Xăm')),
                ('viem_gan_b', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Viêm gan B')),
                ('hut_thuoc', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Hút thuốc')),
                ('uong_ruou', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Uống rượu')),
                ('benh_di_truyen', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Bệnh di truyền')),
                ('tot_nghiep', models.CharField(choices=[('0', 'Không yêu cầu'), ('1', 'Tốt nghiệp cấp 2 trở lên'), ('2', 'Bằng nghề trở lên'), ('3', 'Tốt nghiệp cao đẳng trở lên'), ('4', 'Tốt nghiệp đại học trở lên')], default=0, verbose_name='Tốt nghiệp')),
                ('ngoai_ngu', models.CharField(choices=[('0', 'Không yêu cầu'), ('1', 'Tiếng Nhật'), ('2', 'Tiếng Trung'), ('3', 'Tiếng Anh'), ('4', 'Tiếng Hàn'), ('5', 'Ngoại ngữ khác')], default=0, verbose_name='Ngoại ngữ')),
                ('bang_nghe', models.CharField(choices=[('0', 'Không'), ('1', 'Có')], default=0, verbose_name='Bằng nghề')),
                ('tay_nghe', models.CharField(blank=True, max_length=250, null=True, verbose_name='Tay nghề')),
                ('da_di_xkld', models.CharField(blank=True, max_length=250, null=True, verbose_name='Đã đi xklđ')),
                ('tinh_cach', models.CharField(blank=True, max_length=250, null=True, verbose_name='Tính cách')),
                ('so_thich', models.CharField(blank=True, max_length=250, null=True, verbose_name='Sở thích')),
                ('yeu_cau_khac', models.CharField(blank=True, max_length=250, null=True, verbose_name='Yêu cầu khác')),
                ('role', models.PositiveSmallIntegerField(choices=[(1, 'Admin'), (2, 'Ứng viên'), (3, 'Nhà tuyển dụng')], default=2, verbose_name='Vai trò')),
                ('country', models.ManyToManyField(blank=True, null=True, related_name='userprofile_country', to='city.country', verbose_name='Xklđ các nước')),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_groups', to='auth.group')),
                ('nganh_nghe', models.ManyToManyField(blank=True, null=True, related_name='userprofile_nganh_nghe', to='profession.profession', verbose_name='Ngành nghề')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_permissions', to='auth.permission')),
            ],
            options={
                'verbose_name_plural': 'Người dùng',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
